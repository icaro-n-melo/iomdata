import streamlit as st
import pandas as pd
import numpy as np
import plotly  as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import seaborn as sns
import calendar
from datetime import datetime
import pycountry
from wordcloud import WordCloud

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
st.title("–ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
st.markdown("""
–≠—Ç–∞ –ø–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö —Å –º–∏–≥—Ä–∞–Ω—Ç–∞–º–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é 
–æ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—è—Ö, —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —ç—Ç–∏–º–∏ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è–º–∏ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.
""")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def –∑–∞–≥—Ä—É–∑–∏—Ç—å_–¥–∞–Ω–Ω—ã–µ(—Ñ–∞–π–ª=None):
    if —Ñ–∞–π–ª is not None:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            if —Ñ–∞–π–ª.name.endswith('.csv'):
                df = pd.read_csv(—Ñ–∞–π–ª)
            else:
                df = pd.read_excel(—Ñ–∞–π–ª)
            return df, None
        except Exception as e:
            return None, str(e)
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ DataFrame —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        # (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏)
        data = {
            'LATITUDE': [31.650259, 31.59713, 31.94026, 31.506777, 59.1551, 32.45435],
            'LONGITUDE': [-110.366453, -111.73756, -113.01125, -109.315632, 28, -113.18402],
            'Incident Type': ['–ö–æ—Ä–∞–±–ª–µ–∫—Ä—É—à–µ–Ω–∏–µ', '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è –∞–≤–∞—Ä–∏—è', '–û–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ', '–ù–∞—Å–∏–ª–∏–µ', '–£—Ç–æ–ø–ª–µ–Ω–∏–µ', '–ü–µ—Ä–µ–æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ'],
            'Region of Incident': ['–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞', '–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞', '–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞', '–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞', '–ï–≤—Ä–æ–ø–∞', '–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞'],
            'Incident Date': ['2023-01-15', '2023-02-20', '2023-03-10', '2023-04-05', '2023-05-12', '2023-06-08'],
            'Incident Year': [2023, 2023, 2023, 2023, 2023, 2023],
            'Month': ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å'],
            'Number of Dead': [12, 5, 3, 8, 15, 2],
            'Minimum Estimated Number of Missing': [3, 0, 2, 1, 5, 0],
            'Total Number of Dead and Missing': [15, 5, 5, 9, 20, 2],
            'Number of Survivors': [8, 12, 5, 3, 2, 4],
            'Number of Females': [6, 7, 2, 5, 8, 1],
            'Number of Males': [14, 10, 6, 7, 14, 5],
            'Number of Children': [3, 4, 1, 2, 7, 0],
            'Country of Origin': ['–ì–≤–∞—Ç–µ–º–∞–ª–∞', '–ú–µ–∫—Å–∏–∫–∞', '–ì–æ–Ω–¥—É—Ä–∞—Å', '–≠–ª—å-–°–∞–ª—å–≤–∞–¥–æ—Ä', '–°–∏—Ä–∏—è', '–ú–µ–∫—Å–∏–∫–∞'],
            'Region of Origin': ['–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞', '–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞', '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞', '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞', '–ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫', '–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞'],
            'Cause of Death': ['–£—Ç–æ–ø–ª–µ–Ω–∏–µ', '–¢—Ä–∞–≤–º–∞', '–û–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ', '–ù–∞—Å–∏–ª–∏–µ', '–£—Ç–æ–ø–ª–µ–Ω–∏–µ', '–í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã'],
            'Country of Incident': ['–°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –®—Ç–∞—Ç—ã', '–°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –®—Ç–∞—Ç—ã', '–°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –®—Ç–∞—Ç—ã', '–°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –®—Ç–∞—Ç—ã', '–§–∏–Ω–ª—è–Ω–¥–∏—è', '–°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –®—Ç–∞—Ç—ã'],
            'Migration Route': ['–ú–µ–∫—Å–∏–∫–∞ –≤ –°–®–ê', '–ú–µ–∫—Å–∏–∫–∞ –≤ –°–®–ê', '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ –≤ –°–®–ê', '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ –≤ –°–®–ê', '–ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫ –≤ –ï–≤—Ä–æ–ø—É', '–ú–µ–∫—Å–∏–∫–∞ –≤ –°–®–ê'],
            'Location of Incident': ['–ü—É—Å—Ç—ã–Ω—è', '–®–æ—Å—Å–µ', '–ü—É—Å—Ç—ã–Ω—è', '–ì—Ä–∞–Ω–∏—Ü–∞', '–ú–æ—Ä–µ', '–ì–æ—Ä—ã']
        }
        df = pd.DataFrame(data)
        return df, None

# –û–ø—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
st.sidebar.header("üìä –î–∞–Ω–Ω—ã–µ")
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=["xlsx", "xls", "csv"])

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
if uploaded_file is not None:
    df, –æ—à–∏–±–∫–∞ = –∑–∞–≥—Ä—É–∑–∏—Ç—å_–¥–∞–Ω–Ω—ã–µ(uploaded_file)
    if –æ—à–∏–±–∫–∞:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {–æ—à–∏–±–∫–∞}")
        st.stop()
    else:
        st.sidebar.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
else:
    df, _ = –∑–∞–≥—Ä—É–∑–∏—Ç—å_–¥–∞–Ω–Ω—ã–µ()
    st.sidebar.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Incident Date –≤ datetime, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
if 'Incident Date' in df.columns:
    try:
        df['Incident Date'] = pd.to_datetime(df['Incident Date'])
    except:
        pass

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª—è—Ö
—á–∏—Å–ª–æ–≤—ã–µ_–∫–æ–ª–æ–Ω–∫–∏ = [
    'Number of Dead', 'Minimum Estimated Number of Missing', 
    'Total Number of Dead and Missing', 'Number of Survivors',
    'Number of Females', 'Number of Males', 'Number of Children'
]

for col in —á–∏—Å–ª–æ–≤—ã–µ_–∫–æ–ª–æ–Ω–∫–∏:
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')
        df[col] = df[col].fillna(0)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")

# –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
if 'Incident Year' in df.columns:
    –¥–æ—Å—Ç—É–ø–Ω—ã–µ_–≥–æ–¥—ã = sorted(df['Incident Year'].unique())
    if len(–¥–æ—Å—Ç—É–ø–Ω—ã–µ_–≥–æ–¥—ã) > 1:
        –≤—ã–±—Ä–∞–Ω–Ω—ã–π_–≥–æ–¥ = st.sidebar.multiselect(
            "–ì–æ–¥ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞",
            options=–¥–æ—Å—Ç—É–ø–Ω—ã–µ_–≥–æ–¥—ã,
            default=–¥–æ—Å—Ç—É–ø–Ω—ã–µ_–≥–æ–¥—ã
        )
        if –≤—ã–±—Ä–∞–Ω–Ω—ã–π_–≥–æ–¥:
            df = df[df['Incident Year'].isin(–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–≥–æ–¥)]

# –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω—É
if 'Region of Incident' in df.columns:
    –¥–æ—Å—Ç—É–ø–Ω—ã–µ_—Ä–µ–≥–∏–æ–Ω—ã = sorted(df['Region of Incident'].unique())
    if len(–¥–æ—Å—Ç—É–ø–Ω—ã–µ_—Ä–µ–≥–∏–æ–Ω—ã) > 1:
        –≤—ã–±—Ä–∞–Ω–Ω—ã–π_—Ä–µ–≥–∏–æ–Ω = st.sidebar.multiselect(
            "–†–µ–≥–∏–æ–Ω –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞",
            options=–¥–æ—Å—Ç—É–ø–Ω—ã–µ_—Ä–µ–≥–∏–æ–Ω—ã,
            default=–¥–æ—Å—Ç—É–ø–Ω—ã–µ_—Ä–µ–≥–∏–æ–Ω—ã
        )
        if –≤—ã–±—Ä–∞–Ω–Ω—ã–π_—Ä–µ–≥–∏–æ–Ω:
            df = df[df['Region of Incident'].isin(–≤—ã–±—Ä–∞–Ω–Ω—ã–π_—Ä–µ–≥–∏–æ–Ω)]

# –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
if 'Incident Type' in df.columns:
    –¥–æ—Å—Ç—É–ø–Ω—ã–µ_—Ç–∏–ø—ã = sorted(df['Incident Type'].unique())
    if len(–¥–æ—Å—Ç—É–ø–Ω—ã–µ_—Ç–∏–ø—ã) > 1:
        –≤—ã–±—Ä–∞–Ω–Ω—ã–π_—Ç–∏–ø = st.sidebar.multiselect(
            "–¢–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞",
            options=–¥–æ—Å—Ç—É–ø–Ω—ã–µ_—Ç–∏–ø—ã,
            default=–¥–æ—Å—Ç—É–ø–Ω—ã–µ_—Ç–∏–ø—ã
        )
        if –≤—ã–±—Ä–∞–Ω–Ω—ã–π_—Ç–∏–ø:
            df = df[df['Incident Type'].isin(–≤—ã–±—Ä–∞–Ω–Ω—ã–π_—Ç–∏–ø)]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
if len(df) == 0:
    st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
    st.stop()

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ —Å–µ–∫—Ü–∏–∏
tab1, tab2, tab3, tab4 = st.tabs(["üìà –û–±—â–∏–π –æ–±–∑–æ—Ä", "üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "üë• –î–µ–º–æ–≥—Ä–∞—Ñ–∏—è", "üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"])

with tab1:
    st.header("–û–±—â–∏–π –æ–±–∑–æ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ KPI
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        –æ–±—â–µ–µ_—á–∏—Å–ª–æ_–∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ = len(df)
        st.metric("–í—Å–µ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤", f"{–æ–±—â–µ–µ_—á–∏—Å–ª–æ_–∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤:,}")
    
    with col2:
        if 'Total Number of Dead and Missing' in df.columns:
            –æ–±—â–µ–µ_—á–∏—Å–ª–æ_–ø–æ–≥–∏–±—à–∏—Ö_–ø—Ä–æ–ø–∞–≤—à–∏—Ö = int(df['Total Number of Dead and Missing'].sum())
            st.metric("–í—Å–µ–≥–æ –∂–µ—Ä—Ç–≤", f"{–æ–±—â–µ–µ_—á–∏—Å–ª–æ_–ø–æ–≥–∏–±—à–∏—Ö_–ø—Ä–æ–ø–∞–≤—à–∏—Ö:,}")
    
    with col3:
        if 'Number of Survivors' in df.columns:
            –æ–±—â–µ–µ_—á–∏—Å–ª–æ_–≤—ã–∂–∏–≤—à–∏—Ö = int(df['Number of Survivors'].sum())
            st.metric("–í—Å–µ–≥–æ –≤—ã–∂–∏–≤—à–∏—Ö", f"{–æ–±—â–µ–µ_—á–∏—Å–ª–æ_–≤—ã–∂–∏–≤—à–∏—Ö:,}")
    
    with col4:
        if 'Number of Children' in df.columns:
            –æ–±—â–µ–µ_—á–∏—Å–ª–æ_–¥–µ—Ç–µ–π = int(df['Number of Children'].sum())
            st.metric("–ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –¥–µ—Ç–µ–π", f"{–æ–±—â–µ–µ_—á–∏—Å–ª–æ_–¥–µ—Ç–µ–π:,}")
    
    st.markdown("---")
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è
    if 'Incident Date' in df.columns and pd.api.types.is_datetime64_any_dtype(df['Incident Date']):
        st.subheader("–¢–µ–Ω–¥–µ–Ω—Ü–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        df_–≤—Ä–µ–º—è = df.copy()
        df_–≤—Ä–µ–º—è['–ú–µ—Å—è—Ü'] = df_–≤—Ä–µ–º—è['Incident Date'].dt.to_period('M')
        –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º = df_–≤—Ä–µ–º—è.groupby('–ú–µ—Å—è—Ü').size().reset_index(name='–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã')
        –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º['–ú–µ—Å—è—Ü'] = –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º['–ú–µ—Å—è—Ü'].astype(str)
        
        # –ü–æ–≥–∏–±—à–∏–µ –∏ –ø—Ä–æ–ø–∞–≤—à–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º
        if 'Total Number of Dead and Missing' in df.columns:
            –∂–µ—Ä—Ç–≤—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º = df_–≤—Ä–µ–º—è.groupby('–ú–µ—Å—è—Ü')['Total Number of Dead and Missing'].sum().reset_index()
            –∂–µ—Ä—Ç–≤—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º['–ú–µ—Å—è—Ü'] = –∂–µ—Ä—Ç–≤—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º['–ú–µ—Å—è—Ü'].astype(str)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=–∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º['–ú–µ—Å—è—Ü'],
                y=–∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º['–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã'],
                name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤',
                line=dict(color='blue', width=2)
            ))
            
            fig.add_trace(go.Scatter(
                x=–∂–µ—Ä—Ç–≤—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º['–ú–µ—Å—è—Ü'],
                y=–∂–µ—Ä—Ç–≤—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º['Total Number of Dead and Missing'],
                name='–ñ–µ—Ä—Ç–≤—ã (–ø–æ–≥–∏–±—à–∏–µ –∏ –ø—Ä–æ–ø–∞–≤—à–∏–µ)',
                line=dict(color='red', width=2),
                yaxis='y2'
            ))
            
            fig.update_layout(
                title='–î–∏–Ω–∞–º–∏–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∏ –∂–µ—Ä—Ç–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–∏',
                xaxis=dict(title='–ú–µ—Å—è—Ü'),
                yaxis=dict(title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤', showgrid=False),
                yaxis2=dict(title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ—Ä—Ç–≤', overlaying='y', side='right', showgrid=False),
                legend=dict(x=0.01, y=0.99),
                height=400
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    if 'Incident Type' in df.columns:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø—É")
            
            –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã_–ø–æ_—Ç–∏–ø—É = df['Incident Type'].value_counts().reset_index()
            –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã_–ø–æ_—Ç–∏–ø—É.columns = ['–¢–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
            
            fig = px.bar(
                –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã_–ø–æ_—Ç–∏–ø—É.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ascending=False).head(10),
                x='–¢–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞',
                y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                color='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                color_continuous_scale='Blues',
                title='–¢–æ–ø-10 —Ç–∏–ø–æ–≤ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤'
            )
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.subheader("–ñ–µ—Ä—Ç–≤—ã –ø–æ —Ç–∏–ø—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞")
            
            if 'Total Number of Dead and Missing' in df.columns:
                –∂–µ—Ä—Ç–≤—ã_–ø–æ_—Ç–∏–ø—É = df.groupby('Incident Type')['Total Number of Dead and Missing'].sum().reset_index()
                –∂–µ—Ä—Ç–≤—ã_–ø–æ_—Ç–∏–ø—É.columns = ['–¢–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞', '–í—Å–µ–≥–æ –∂–µ—Ä—Ç–≤']
                
                fig = px.pie(
                    –∂–µ—Ä—Ç–≤—ã_–ø–æ_—Ç–∏–ø—É.sort_values('–í—Å–µ–≥–æ –∂–µ—Ä—Ç–≤', ascending=False).head(10),
                    values='–í—Å–µ–≥–æ –∂–µ—Ä—Ç–≤',
                    names='–¢–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞',
                    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–µ—Ä—Ç–≤ –ø–æ —Ç–∏–ø—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞',
                    hole=0.4,
                    color_discrete_sequence=px.colors.sequential.Blues_r
                )
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.header("–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    
    # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    st.subheader("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if 'LATITUDE' in df.columns and 'LONGITUDE' in df.columns:
        # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        df_map = df.copy()
        df_map = df_map.dropna(subset=['LATITUDE', 'LONGITUDE'])
        df_map = df_map[(df_map['LATITUDE'] >= -90) & (df_map['LATITUDE'] <= 90) & 
                       (df_map['LONGITUDE'] >= -180) & (df_map['LONGITUDE'] <= 180)]
        
        if len(df_map) > 0:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –º–∞—Ä–∫–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∂–µ—Ä—Ç–≤–∞—Ö
            if 'Total Number of Dead and Missing' in df_map.columns:
                df_map['marker_size'] = df_map['Total Number of Dead and Missing'].fillna(1)
                df_map.loc[df_map['marker_size'] == 0, 'marker_size'] = 1
                df_map['marker_size'] = np.log1p(df_map['marker_size']) * 5
            else:
                df_map['marker_size'] = 5
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è
            hover_text = []
            for idx, row in df_map.iterrows():
                —Ç–µ–∫—Å—Ç = f"–ú–µ—Å—Ç–æ: {row.get('Location of Incident', 'N/A')}<br>"
                if 'Incident Type' in df_map.columns:
                    —Ç–µ–∫—Å—Ç += f"–¢–∏–ø: {row['Incident Type']}<br>"
                if 'Incident Date' in df_map.columns:
                    –¥–∞—Ç–∞ = row['Incident Date']
                    if pd.api.types.is_datetime64_any_dtype(–¥–∞—Ç–∞):
                        —Ç–µ–∫—Å—Ç += f"–î–∞—Ç–∞: {–¥–∞—Ç–∞.strftime('%d/%m/%Y')}<br>"
                    else:
                        —Ç–µ–∫—Å—Ç += f"–î–∞—Ç–∞: {–¥–∞—Ç–∞}<br>"
                if 'Total Number of Dead and Missing' in df_map.columns:
                    —Ç–µ–∫—Å—Ç += f"–ñ–µ—Ä—Ç–≤—ã: {int(row['Total Number of Dead and Missing'])}"
                hover_text.append(—Ç–µ–∫—Å—Ç)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
            fig = go.Figure()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
            fig.add_densitymapbox(
                lat=df_map['LATITUDE'],
                lon=df_map['LONGITUDE'],
                z=df_map.get('Total Number of Dead and Missing', np.ones(len(df_map))),
                radius=20,
                colorscale='Reds',
                colorbar=dict(title='–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å'),
                hoverinfo='none',
                opacity=0.7
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫
            fig.add_scattermapbox(
                lat=df_map['LATITUDE'],
                lon=df_map['LONGITUDE'],
                mode='markers',
                marker=dict(
                    size=df_map['marker_size'],
                    color='rgb(220, 20, 60)',
                    opacity=0.7
                ),
                text=hover_text,
                hoverinfo='text'
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞ –∫–∞—Ä—Ç—ã
            fig.update_layout(
                mapbox_style="carto-positron",
                mapbox=dict(
                    center=dict(lat=df_map['LATITUDE'].mean(), lon=df_map['LONGITUDE'].mean()),
                    zoom=2
                ),
                margin=dict(r=0, t=0, l=0, b=0),
                height=500
            )
            
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ.")
    else:
        st.warning("–°—Ç–æ–ª–±—Ü—ã —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö.")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω—É/—Å—Ç—Ä–∞–Ω–µ
    st.markdown("---")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if 'Country of Incident' in df.columns:
            st.subheader("–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º")
            
            —Å—Ç—Ä–∞–Ω—ã_–∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã = df['Country of Incident'].value_counts().reset_index()
            —Å—Ç—Ä–∞–Ω—ã_–∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã.columns = ['–°—Ç—Ä–∞–Ω–∞', '–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã']
            
            fig = px.choropleth(
                —Å—Ç—Ä–∞–Ω—ã_–∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã,
                locations='–°—Ç—Ä–∞–Ω–∞',
                locationmode='country names',
                color='–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã',
                color_continuous_scale='Blues',
                title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º',
                height=400
            )
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        if 'Migration Route' in df.columns:
            st.subheader("–ù–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã")
            
            –º–∞—Ä—à—Ä—É—Ç—ã = df['Migration Route'].value_counts().reset_index()
            –º–∞—Ä—à—Ä—É—Ç—ã.columns = ['–ú–∞—Ä—à—Ä—É—Ç', '–ß–∞—Å—Ç–æ—Ç–∞']
            
            fig = px.bar(
                –º–∞—Ä—à—Ä—É—Ç—ã.sort_values('–ß–∞—Å—Ç–æ—Ç–∞', ascending=False).head(10),
                x='–ú–∞—Ä—à—Ä—É—Ç',
                y='–ß–∞—Å—Ç–æ—Ç–∞',
                color='–ß–∞—Å—Ç–æ—Ç–∞',
                color_continuous_scale='Blues',
                title='–¢–æ–ø-10 –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤'
            )
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.header("–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É –∏ –≤–æ–∑—Ä–∞—Å—Ç—É
    if all(col in df.columns for col in ['Number of Males', 'Number of Females', 'Number of Children']):
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É")
            
            –æ–±—â–∏–π_–ø–æ–ª = {
                '–ü–æ–ª': ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'],
                '–í—Å–µ–≥–æ': [df['Number of Males'].sum(), df['Number of Females'].sum()]
            }
            
            fig = px.pie(
                –æ–±—â–∏–π_–ø–æ–ª,
                values='–í—Å–µ–≥–æ',
                names='–ü–æ–ª',
                color_discrete_sequence=['#1f77b4', '#ff7f0e'],
                hole=0.4
            )
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.subheader("–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –¥–µ—Ç–µ–π")
            
            –≤—Å–µ–≥–æ_–¥–µ—Ç–µ–π = df['Number of Children'].sum()
            –≤—Å–µ–≥–æ_–≤–∑—Ä–æ—Å–ª—ã—Ö = df['Number of Males'].sum() + df['Number of Females'].sum() - –≤—Å–µ–≥–æ_–¥–µ—Ç–µ–π
            
            –¥–∞–Ω–Ω—ã–µ_–≤–æ–∑—Ä–∞—Å—Ç = {
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': ['–í–∑—Ä–æ—Å–ª—ã–µ', '–î–µ—Ç–∏'],
                '–í—Å–µ–≥–æ': [–≤—Å–µ–≥–æ_–≤–∑—Ä–æ—Å–ª—ã—Ö, –≤—Å–µ–≥–æ_–¥–µ—Ç–µ–π]
            }
            
            fig = px.bar(
                –¥–∞–Ω–Ω—ã–µ_–≤–æ–∑—Ä–∞—Å—Ç,
                x='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                y='–í—Å–µ–≥–æ',
                color='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                color_discrete_sequence=['#1f77b4', '#ff7f0e'],
                text='–í—Å–µ–≥–æ'
            )
            fig.update_traces(texttemplate='%{text:,}', textposition='outside')
            fig.update_layout(height=400, showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞–Ω–µ/—Ä–µ–≥–∏–æ–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
    st.markdown("---")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if 'Country of Origin' in df.columns:
            st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è")
            
            —Å—Ç—Ä–∞–Ω—ã_–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è = df['Country of Origin'].value_counts().reset_index()
            —Å—Ç—Ä–∞–Ω—ã_–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è.columns = ['–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
            
            fig = px.bar(
                —Å—Ç—Ä–∞–Ω—ã_–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ascending=False).head(10),
                x='–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è',
                y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                color='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                color_continuous_scale='Blues'
            )
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        if 'Region of Origin' in df.columns:
            st.subheader("–†–µ–≥–∏–æ–Ω—ã –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è")
            
            —Ä–µ–≥–∏–æ–Ω—ã_–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è = df['Region of Origin'].value_counts().reset_index()
            —Ä–µ–≥–∏–æ–Ω—ã_–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è.columns = ['–†–µ–≥–∏–æ–Ω –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
            
            fig = px.pie(
                —Ä–µ–≥–∏–æ–Ω—ã_–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è,
                values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                names='–†–µ–≥–∏–æ–Ω –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è',
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
    
    # –£—Ä–æ–≤–µ–Ω—å –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏
    if all(col in df.columns for col in ['Number of Survivors', 'Total Number of Dead and Missing']):
        st.markdown("---")
        st.subheader("–£—Ä–æ–≤–µ–Ω—å –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞")
        
        # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        if 'Incident Type' in df.columns:
            —É—Ä–æ–≤–µ–Ω—å_–≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ = df.groupby('Incident Type').agg({
                'Number of Survivors': 'sum',
                'Total Number of Dead and Missing': 'sum'
            }).reset_index()
            
            —É—Ä–æ–≤–µ–Ω—å_–≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏['–í—Å–µ–≥–æ'] = —É—Ä–æ–≤–µ–Ω—å_–≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏['Number of Survivors'] + —É—Ä–æ–≤–µ–Ω—å_–≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏['Total Number of Dead and Missing']
            —É—Ä–æ–≤–µ–Ω—å_–≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏['–£—Ä–æ–≤–µ–Ω—å –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ (%)'] = (—É—Ä–æ–≤–µ–Ω—å_–≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏['Number of Survivors'] / —É—Ä–æ–≤–µ–Ω—å_–≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏['–í—Å–µ–≥–æ'] * 100).round(1)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ —Å –±–æ–ª–µ–µ —á–µ–º 5 –≤–æ–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –ª—é–¥—å–º–∏
            —É—Ä–æ–≤–µ–Ω—å_–≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ = —É—Ä–æ–≤–µ–Ω—å_–≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏[—É—Ä–æ–≤–µ–Ω—å_–≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏['–í—Å–µ–≥–æ'] >= 5].sort_values('–£—Ä–æ–≤–µ–Ω—å –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ (%)', ascending=False)
            
            fig = px.bar(
                —É—Ä–æ–≤–µ–Ω—å_–≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏,
                x='Incident Type',
                y='–£—Ä–æ–≤–µ–Ω—å –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ (%)',
                color='–£—Ä–æ–≤–µ–Ω—å –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ (%)',
                color_continuous_scale='Blues',
                text='–£—Ä–æ–≤–µ–Ω—å –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ (%)'
            )
            fig.update_traces(texttemplate='%{text:.1f}%', textposition='outside')
            fig.update_layout(height=500, xaxis_title='–¢–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞', yaxis_title='–£—Ä–æ–≤–µ–Ω—å –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ (%)')
            st.plotly_chart(fig, use_container_width=True)

with tab4:
    st.header("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    # –ü—Ä–∏—á–∏–Ω—ã —Å–º–µ—Ä—Ç–∏
    if 'Cause of Death' in df.columns:
        st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã —Å–º–µ—Ä—Ç–∏")
        
        –ø—Ä–∏—á–∏–Ω—ã = df['Cause of Death'].value_counts().reset_index()
        –ø—Ä–∏—á–∏–Ω—ã.columns = ['–ü—Ä–∏—á–∏–Ω–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤
        try:
            wordcloud_data = dict(zip(–ø—Ä–∏—á–∏–Ω—ã['–ü—Ä–∏—á–∏–Ω–∞'], –ø—Ä–∏—á–∏–Ω—ã['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']))
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤
            wordcloud = WordCloud(
                width=800,
                height=400,
                background_color='white',
                colormap='Blues',
                max_words=50
            ).generate_from_frequencies(wordcloud_data)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            fig, ax = plt.subplots(figsize=(10, 5))
            ax.imshow(wordcloud, interpolation='bilinear')
            ax.axis('off')
            st.pyplot(fig)
        except:
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –æ–±–ª–∞–∫–æ —Å–ª–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            fig = px.pie(
                –ø—Ä–∏—á–∏–Ω—ã.head(10),
                values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                names='–ü—Ä–∏—á–∏–Ω–∞',
                title='–¢–æ–ø-10 –ø—Ä–∏—á–∏–Ω —Å–º–µ—Ä—Ç–∏'
            )
            st.plotly_chart(fig, use_container_width=True)
    
    # –°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ø–æ –º–µ—Å—è—Ü–∞–º)
    if 'Month' in df.columns:
        st.markdown("---")
        st.subheader("–°–µ–∑–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ —á–∏—Å–ª–æ–≤–æ–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        –º–µ—Å—è—Ü—ã_–ø–æ—Ä—è–¥–æ–∫ = {month: i for i, month in enumerate(calendar.month_name[1:], 1)}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –º–µ—Å—è—Ü—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏
        if df['Month'].dtype == 'object':
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ—Å—è—Ü—ã —Å —á–∏—Å–ª–∞–º–∏
                df_–º–µ—Å—è—Ü = df.copy()
                df_–º–µ—Å—è—Ü['Month_Num'] = df_–º–µ—Å—è—Ü['Month'].map(–º–µ—Å—è—Ü—ã_–ø–æ—Ä—è–¥–æ–∫)
                
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
                –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º = df_–º–µ—Å—è—Ü.groupby('Month').size().reset_index(name='–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã')
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º['Month_Num'] = –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º['Month'].map(–º–µ—Å—è—Ü—ã_–ø–æ—Ä—è–¥–æ–∫)
                
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü—É
                –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º = –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º.sort_values('Month_Num')
                
                # –ì—Ä–∞—Ñ–∏–∫
                fig = px.line(
                    –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã_–ø–æ_–º–µ—Å—è—Ü–∞–º,
                    x='Month',
                    y='–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã',
                    markers=True,
                    title='–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º'
                )
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)
            except:
                st.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –º–µ—Å—è—Ü–µ–≤.")
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —á–∏—Å–ª–æ–≤—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
    st.markdown("---")
    st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
    
    # –í—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    —á–∏—Å–ª–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã = df.select_dtypes(include=['number']).columns.tolist()
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –∏—Å–∫–∞–∂–∞—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
    —á–∏—Å–ª–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã = [col for col in —á–∏—Å–ª–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã if col.upper() not in ['LATITUDE', 'LONGITUDE']]
    
    if len(—á–∏—Å–ª–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã) >= 3:
        # –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
        –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è = df[—á–∏—Å–ª–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã].corr()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        fig = px.imshow(
            –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è,
            text_auto='.2f',
            color_continuous_scale='RdBu_r',
            title='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö'
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã.")
    
    # –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    st.markdown("---")
    st.subheader("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–∏—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    n_–∑–∞–ø–∏—Å–µ–π = min(10, len(df))
    –ø–æ–∫–∞–∑–∞—Ç—å_–∑–∞–ø–∏—Å–µ–π = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", 1, min(50, len(df)), n_–∑–∞–ø–∏—Å–µ–π)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    st.dataframe(df.head(–ø–æ–∫–∞–∑–∞—Ç—å_–∑–∞–ø–∏—Å–µ–π))
    
    # –û–ø—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CSV)",
        data=df.to_csv(index=False).encode('utf-8'),
        file_name="–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ_–∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤.csv",
        mime="text/csv"
    )

# –ù–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
st.markdown("---")
st.caption("–î–∞—à–±–æ—Ä–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö. –î–∞–Ω–Ω—ã–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ —Ç—Ä–∞–≥–µ–¥–∏–∏.")
st.caption("–ò—Å—Ç–æ—á–Ω–∏–∫: –î–∞–Ω–Ω—ã–µ, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
